#!/usr/bin/env python

"""
Popup notification reminder for a certain time.

Usage:
    reminder TIME [MESSAGE]     # set a reminder
    reminders                   # list all pending reminders

Examples:
    reminder 5m             # reminder in 5 minutes
    reminder 5m blah blah   # ... in 5 minutes with message "blah blah"
    reminder 1h             # ... in 1 hour
    reminder 10s            # ... in 10 seconds

    reminder 1:30           # ... at 1:30 (the *next* 1:30, am/pm depends)
    reminder 10:00p         # ... at 10:00 pm
    reminder 10:00a         # ... at 10:00 am
    reminder 10p            # ... at 10:00 pm (shortcut)

    reminder now            # ... right now
    reminder noon
    reminder midnight

TODO someday:
- fix 'sleep SECONDS' bash file technique for sleeping laptop.
  Need to have a ~60s sleep loop, then recalc.
- more formats:
    reminder 1:30h          # ... in 1 hour and 30 minutes
    reminder 1:30m          # ... in 1 minute and 30 seconds
    reminder 1:23:45h       # ... in 1 hour, 23 minutes and 45 seconds
    reminders -c ID         # cancel a reminder
"""

import sys
import os
import datetime
import time
import codecs
import re
import tempfile
import getpass
import hashlib
import random
import json
import operator

assert sys.platform == "darwin", "this only works on Mac (uses Growl)"


#---- globals

TRACE = os.environ.has_key("TRACE")
REMINDERS_PATH = os.path.expanduser('~/.reminders.json')



#---- exceptions

class ReminderError(Exception):
    pass



#---- support stuff

def usage():
    print __doc__

#var endPattern = /^([1-9]\d*)([mhd])$/;
def timeFromArg(arg, now):
    timePatterns = [
        ("noon", re.compile("noon")),
        ("midnight", re.compile("midnight")),
        ("now", re.compile("now")),
        ("relative", re.compile("(?P<first>[1-9][0-9]*)(?P<scope>[smhd])")),
        ("absolute", re.compile("(?P<hours>[1-9][0-9]?)(:(?P<minutes>[0-9]{2}))?(?P<meridian>[pa])?")),
    ]
    for timeType, pat in timePatterns:
        m = pat.search(arg)
        if m:
            break
    else:
        raise ReminderError("invalid time argument: '%s'" % arg)
    if timeType == "now":
        t = now
    elif timeType == "noon":
        t = datetime.datetime(now.year, now.month, now.day, 12)
        if t < now:
            t += datetime.timedelta(days=1)
    elif timeType == "midnight":
        t = datetime.datetime(now.year, now.month, now.day)
        if t < now:
            t += datetime.timedelta(days=1)
    elif timeType == "relative":
        t = now
        first = int(m.group("first"))
        scope = m.group("scope")
        if scope == 's':
            t += datetime.timedelta(seconds=first)
        elif scope == 'm':
            t += datetime.timedelta(minutes=first)
        elif scope == 'h':
            t += datetime.timedelta(hours=first)
        elif scope == 'd':
            t += datetime.timedelta(days=first)
    elif timeType == "absolute":
        hours = int(m.group("hours"))
        minutes = m.group("minutes") and int(m.group("minutes")) or 0
        if minutes >= 60:
            raise ReminderError(
                "invalid minutes (>=60) in time argument: '%s'" % arg)
        meridian = m.group("meridian")
        if not meridian:
            t = datetime.datetime(now.year, now.month, now.day, hours,
                minutes)
            while t < now:
                t += datetime.timedelta(hours=12)
        elif meridian == 'a':
            t = datetime.datetime(now.year, now.month, now.day)
            t += datetime.timedelta(hours=hours, minutes=minutes)
            if now > t:
                t += datetime.timedelta(days=1)
        elif meridian == 'p':
            hours += 12
            t = datetime.datetime(now.year, now.month, now.day)
            t += datetime.timedelta(hours=hours, minutes=minutes)
            if now > t:
                t += datetime.timedelta(days=1)
    else:
        raise ReminderError("WTF?")
    return t

def get_rid():
    h = hashlib.sha1(str(random.random()))
    return h.hexdigest()[:7]

# http://stackoverflow.com/questions/455580/json-datetime-between-python-and-javascript
class ReminderJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime.datetime):
            s = obj.isoformat()
            # Drop the ms part because older strftime can't read that.
            s = s[:s.rfind('.')] + 'Z'
            return s
        else:
            return super(json.JSONEncoder, self).default(obj)

def decode_reminder(o):
    if o.has_key("rid"):
        o["time"] = datetime.datetime.strptime(
            o["time"], '%Y-%m-%dT%H:%M:%SZ')
        return o
    else:
        return o

def get_reminders():
    if not os.path.exists(REMINDERS_PATH):
        return []
    content = codecs.open(REMINDERS_PATH, 'r', 'utf8').read()
    if not content.strip():
        return []
    reminders = json.loads(content, object_hook=decode_reminder)
    reminders.sort(key=operator.itemgetter("time"))

    # Remove reminders that are no longer running.
    # TODO: should instead or also look at running processes for "reminder-$rid".
    for i, r in reversed(list(enumerate(reminders))):
        if not os.path.exists(r["path"]):
            del reminders[i]

    return reminders

def add_reminder(rid, t, msg, path):
    # WARNING: We're ignoring file locking here. This isn't critical stuff.
    reminders = get_reminders()
    reminders.append({"rid": rid, "time": t, "msg": msg, "path": path})
    f = codecs.open(REMINDERS_PATH, 'w', 'utf8')
    content = json.dumps(reminders, cls=ReminderJSONEncoder)
    f.write(content)
    f.close()



#---- mainline

def main(argv):
    # Hack process opts.
    if '-h' in argv or '--help' in argv:
        usage()
        return 0

    cmdname = os.path.basename(argv[0])
    if cmdname == "reminders":
        return main_reminders(argv)
    else:
        return main_reminder(argv)

def main_reminders(argv):
    reminders = get_reminders()
    template = "%-7s  %-23s  %s"
    print template % ("ID", "TIME", "MESSAGE")
    for r in reminders:
        print template % (r["rid"],
            r["time"].strftime("%a, %b %d at %I:%M %p"), r["msg"])

def main_reminder(argv):
    if len(argv) < 2:
        usage()
        return 2

    msg = None
    if len(argv) > 2:
        msg = ' '.join(argv[2:])
    now = datetime.datetime.now()
    t = timeFromArg(argv[1], now=now)
    assert t >= now
    delta = t - now
    delta_seconds = delta.days * 24 * 60 * 60 + delta.seconds

    # Write the script (all but the last 'rm' command that deletes self).
    if msg:
        #msg_arg = " -m '%s'" % msg
        msg_arg = " -message '%s'" % msg
    else:
        msg_arg = ""
    terminal_notifier = '/usr/local/bin/terminal-notifier'

    if not os.path.exists(terminal_notifier):
        sys.stderr.write("'%s' not found.\n" % terminal_notifier)
        sys.stderr.write("You must install this manually: `brew install terminal-notifier`\n");
        sys.stderr.write("See <https://github.com/julienXX/terminal-notifier> for details.\n")
        return 1

    t_str = t.strftime("%I:%M %p").lstrip('0')
    script = ["""#!/bin/bash
set -o errexit
set -o xtrace
function fatal() {
    echo "$(basename $0): fatal error: $*"
    exit 1
}
function cleanup() {
    local status=$?
    if [[ $status -ne 0 ]]; then
        %s -title 'Error in reminder script' -message '(for %s) %s'
    fi
}
trap 'cleanup' EXIT
""" % (terminal_notifier, t_str, msg)]
    t_unix = time.mktime(t.timetuple())
    script.append("""
TARGET=%d

LONG_INTERVAL=60
SHORT_INTERVAL=10
while true; do
    CURR=$(date +%%s)
    if [[ $CURR -ge $TARGET ]]; then
        break
    fi
    REMAINING=$(($TARGET - $CURR))
    if [[ $REMAINING -lt $SHORT_INTERVAL ]]; then
        sleep $REMAINING
    elif [[ $REMAINING -lt $LONG_INTERVAL ]]; then
        sleep $SHORT_INTERVAL
    else
        sleep $LONG_INTERVAL
    fi
done
""" % t_unix)
    #script.append("growlnotify -s -t 'Reminder at %s' -a iCal %s"
    #    % (t_str, msg_arg))
    script.append("%s -sound Glass -title 'Reminder at %s' %s"
        % (terminal_notifier, t_str, msg_arg))

    rid = get_rid()
    fd, path = tempfile.mkstemp(prefix='reminder-%s-tmp' % rid)
    script.append("rm -f '%s'" % path)
    f = os.fdopen(fd, 'w')
    f.write('\n'.join(script))
    f.close()

    # Log this reminder for `reminders` possible usage.
    add_reminder(rid, t, msg, path)

    # Run it.
    os.system('cd /var/tmp && nohup bash "%s" 2>/dev/null &' % path)
    date_str = t.strftime("%a, %b %d at ") + t_str
    print "Reminder set for %s." % date_str
    if TRACE:
        print "-- (time: %s, delta: %s)" % (t, delta)
        print '\n'.join(script)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
