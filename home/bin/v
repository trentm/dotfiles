#!/bin/bash
#
# [V]iew the current dir, or given file arg, in GitHub view.
#
# Usage:
#   v [PATH] [LINE-NUM-OR-ANCHOR]
#   v [ISSUE-OR-PR-NUM]
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

# TODO: getopt and arg for line or token? could use GH URL syntax for
# those unless '#' is shell automatically comments out

# ---- globals

base_url=

# ---- support functions

function fatal {
    echo "$(basename $0): error: $*"
    exit 1
}

# Usage: set_base_url(DIR[, TRY_FORK_ORIGINS])
function set_base_url {
    local dir
    local try_fork_origins
    local remote
    local repo_name

    dir="$1"
    try_fork_origins="$2"

    if [[ "$try_fork_origins" == "true" ]]; then
        # Try to use an "upstream" (common) or "fork" (used by 'backport' tool)
        # remote instead of the typical "origin".
        remote=$(git -C "$dir" remote show | grep ^upstream$ || true)
        if [[ -z "$remote" ]]; then
            remote=$(git -C "$dir" remote show | grep ^fork$ || true)
        fi
    fi
    if [[ -z "$remote" ]]; then
        remote=origin
    fi

    remote_url=$(git -C "$dir" config "remote.$remote.url" || true)
    [[ -n "$remote_url" ]] || fatal "'$dir' is not in a git clone"

    if [[ "$remote_url" =~ ^https://.* ]]; then
        base_url=$(echo "$remote_url" | sed 's/\.git$//')
    elif [[ "$remote_url" =~ ^git@github.com: ]]; then
        repo_name=$(echo "$remote_url" | cut -d ':' -f 2 | sed 's/\.git$//')
        base_url="https://github.com/$repo_name"
    else
        fatal "don't know base https URL for remote '$remote_url'"
    fi
}

# ---- mainline

path="$1"
[[ -n "$path" ]] || path=.
anchor="$2"

# If "path" is a number, open that issue/pr.
if [[ "$path" =~ ^[0-9]+$ ]]; then
    set_base_url "." true
    # Redir from "/issues/num" to "/pull/num" is broken in new GitHub issues.
    # See https://github.com/github/feedback/discussions/8623
    url=$base_url/pull/$path
else
    if [[ -d "$path" ]]; then
        dir="$path"
        base=
    else
        dir=$(dirname "$path")
        base=$(basename "$path")
    fi

    set_base_url "$dir" false
    if [[ -n "$(git -C "$dir" symbolic-ref HEAD 2>/dev/null || true)" ]]; then
        # We are on a branch.
        treename=$(git -C "$dir" symbolic-ref HEAD | cut -d/ -f3-)
    else
        # Otherwise, hopefully we are on a tag.
        treename=$(git describe --exact-match --tags HEAD)
    fi
    subdir=$(git -C "$dir" rev-parse --show-prefix)

    if [[ -z "$base" ]]; then
        url=$base_url/tree/${treename}/${subdir}
    else
        url=$base_url/blob/${treename}/${subdir}${base}

        if [[ "$anchor" =~ ^[0-9]+$ ]]; then
            url+="#L${anchor}"
        elif [[ -n "$anchor" ]]; then
            url+="#${anchor}"
        fi
    fi
fi

open "$url"
