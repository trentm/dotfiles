# Trent's shared shell config (compat with bash and zsh)

# ---- Env

UNAME=$(uname)

if [[ $UNAME == "SunOS" ]]; then
    PATH="/opt/local/gnu/bin:/opt/local/bin:/opt/local/sbin:$PATH"
elif [[ "$UNAME" == "Darwin" ]]; then
    # Homebrew
    if [[ -f /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    else
      echo ".shellrc: warning: cannot find Homebrew" >&2
      HOMEBREW_PREFIX=$HOME/no-homebrew
    fi
fi

# Go from https://go.dev/doc/install installs to /usr/local/go. From Homebrew
# to $HOMEBREW_PREFIX.
#PATH="/usr/local/go/bin:$PATH"

PATH="$HOME/.cargo/bin:$PATH"

# https://www.python.org/downloads/ lists active releases
# Also have 'pyenv' installed (https://github.com/pyenv/pyenv#how-it-works)
eval "$(pyenv init -)"
if [[ "$UNAME" == "Darwin" ]]; then
    if [[ -d /Library/Frameworks/Python.framework/Versions/3.13/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.13/bin:$PATH
    elif [[ -d /Library/Frameworks/Python.framework/Versions/3.12/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH
    elif [[ -d /Library/Frameworks/Python.framework/Versions/3.11/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.11/bin:$PATH
    elif [[ -d /Library/Frameworks/Python.framework/Versions/3.10/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.10/bin:$PATH
    elif [[ -d /Library/Frameworks/Python.framework/Versions/3.9/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.9/bin:$PATH
    elif [[ -d /Library/Frameworks/Python.framework/Versions/3.8/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.8/bin:$PATH
    elif [[ -d /Library/Frameworks/Python.framework/Versions/3.7/bin ]]; then
        PATH=/Library/Frameworks/Python.framework/Versions/3.7/bin:$PATH
    else
        echo ".shellrc: warning: no python.org install of Python 3.13...3.7 install was found (install from https://www.python.org/downloads/macos/)" >&2
    fi
fi
if [[ -d "$HOME/.local/bin" ]]; then
    # TODO: is this still relevant?
    PATH="$HOME/.local/bin:$PATH"
fi

PATH="$HOME/bin:$PATH"
export PATH


# TODO: should we lock to en_US.UTF-8?
## enable en_US locale w/ utf-8 encodings if not already configured
#: ${LANG:="en_US.UTF-8"}
#: ${LANGUAGE:="en"}
#: ${LC_CTYPE:="en_US.UTF-8"}
#: ${LC_ALL:="en_US.UTF-8"}
#export LANG LANGUAGE LC_CTYPE LC_ALL

if [[ -n "$(command -v vim)" ]]; then
    export EDITOR=vim
    alias vi=vim
else
    export EDITOR=vi
fi
export PAGER="less -iRwX"
export MANPAGER="less -iRswX"

export GOPATH=$HOME/go  # same as Go1.8 default
test -r $HOME/.pythonstartuprc && export PYTHONSTARTUP=$HOME/.pythonstartuprc

# Java, Maven
#
# Links:
# - https://stackoverflow.com/questions/21964709/how-to-set-or-change-the-default-java-jdk-version-on-macos
# - https://www.andrewhoog.com/post/3-ways-to-install-java-on-macos-2023/
# - https://adoptium.net/temurin/ (the distro favoured by apm-agent-java)
#
# IIUC, the set of installed JVMs is in (or linked from)
# "/Library/Java/JavaVirtualMachines".
# `/usr/libexec/java_home` is used to list them and perhaps pick the
# default one. I believe the *latest* version there is used as default.
# Or one can set "JAVA_HOME".
#
if [[ -f /usr/libexec/java_home ]]; then
  export JAVA_HOME=`/usr/libexec/java_home -v 17`
fi

# TODO: drop this when all using SSH for git signing
# GPG git signing setup
# https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e
export GPG_TTY=$(tty)

# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-telemetry.html
export SAM_CLI_TELEMETRY=0

# Turn off telemetry from Azure Functions cli tools
# (from 'brew install azure-functions-core-tools')
export FUNCTIONS_CORE_TOOLS_TELEMETRY_OPTOUT=1


# ---- Aliases and functions

# Common
if [[ "$UNAME" == "SunOS" ]]; then
    alias ls="command ls -h"
else
    alias ls="command ls -hBG"
fi
alias l="ls -lFA"

# VCS
alias gd='git diff'
alias gds='git diff --staged'
alias gs='git status'
alias gb='git branch'
alias gc='git checkout'
alias gl='git log --stat'
alias glp='git log -p'
alias gl1='git log -1'
# Updating a local clone is hard (TM). I'm not confident in my current
# commands to first update (possibly changed tags), then fetch, then rebase,
# then submodule update. Having 3 commands is slow and lame.
# - 'git fetch' requires '--tags' or an explicit refspec including 'refs/tags'
#   to fetch all tags. However '--prune' and '--prune-tags' gets interesting.
# - git version 2.20 changed behaviour such that changed tags require
#   '--force' to be updated. 'git fetch --tags ...' will *exit non-zero* if
#   there is a changed tag. Sigh. See this for an example I hit:
#   https://github.com/elastic/apm-pipeline-library/issues/905
alias giddyup='git fetch --force --prune origin "refs/tags/*:refs/tags/*" && git fetch --prune --append origin && git pull --rebase origin $(git rev-parse --abbrev-ref HEAD) && git submodule update --init'
alias prit='gh pr create --fill'

# My tools
alias code="'/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code'"
alias c=code  # vscode
alias k=code  # vscode
alias c.="code ."  # vscode the current dir
alias markdown2="python3 ~/tm/python-markdown2/lib/markdown2.py"
alias eol="python3 $HOME/tm/eol/lib/eol.py"
alias j="jekyll && (cd _site && staticserve)"
alias mtime='python3 -c "import os,sys,stat; print(os.stat(sys.argv[1]).st_mtime)"'
alias rg='rg --hidden -M1024'
alias rgall='rg -g "*" -a'
function rgless() {
    rg --heading -n --color ansi "$@" | less -R
}
if [[ "$UNAME" == "Darwin" ]]; then
    alias tailscale="/Applications/Tailscale.app/Contents/MacOS/Tailscale"
fi

function asdf() {
    ~/bin/asdf-reset.sh
    cd ~/tmp/asdf
}

alias gtd="python3 ~/Dropbox/gtd/bin/gtd.py"
alias note="python3 ~/Dropbox/gtd/bin/gtd.py note"

# Shuffle lines (from <http://stackoverflow.com/a/6511327>)
alias shuf="perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);'"

alias js2json='node -e '\''s=""; process.stdin.resume(); process.stdin.on("data",function(c){s+=c}); process.stdin.on("end",function(){o=eval("("+s+")");console.log(JSON.stringify(o)); });'\'''

alias isotime='node -e "console.log(new Date().toISOString())"'
alias lower='python3 -c "import sys; sys.stdout.write(sys.stdin.read().lower())"'
alias ips="ifconfig -a | grep 'inet ' | awk '{print \$2}'"

# http://drawohara.com/post/6344279/crontab-temp-file-must-be-edited-in-place
alias crontab='VIM_CRONTAB=true crontab'

# standardjs is silent to a fault. This'll tell you which files it is linting.
alias standard-verbose='DEBUG=eslint:cli-engine npx standard'

# Python virtual envs (pyenv) for Python >=3.3, else you can try virtualenv.
# - Create a new venv: 'venv venv'
# - Activate it: 'source ./venv/bin/activate'
# - It should show as "venv:$dirname" in PS1 (see .zshrc)
# - Deactivate it: 'deactivate'
# https://docs.python.org/3/tutorial/venv.html
alias venv='python3 -m venv'
alias venv-create='venv ./venv'  # suggest always call it "venv" in a given dir
alias venv-activate='source ./venv/bin/activate'
alias venv-deactivate='deactivate'

# Bash shell driver for 'go' (https://github.com/trentm/go-tool).
#export PATH=$HOME/tm/go-tool/lib:$PATH
function g {
    export GO_SHELL_SCRIPT=$HOME/.__tmp_go.sh
    PYTHONPATH=$HOME/tm/go-tool/lib:$PYTHONPATH python3 -m go $*
    if [ -f $GO_SHELL_SCRIPT ] ; then
        source $GO_SHELL_SCRIPT
    fi
    unset GO_SHELL_SCRIPT
}

# pomodoro timer
function pomo() {
    reminder 25m "pomodoro: end of timer"
    reminder 30m "pomodoro: end of break"
}

# Select a node $ver either at ~/opt/node-$ver or via 'nvm use $ver'.
# Set NODE_PROFILE for my PS1.
# Usage:
#   node-select         # list avail versions and set NODE_PROFILE
#   node-select VER
function node-select {
    local ver dir firstpath
    ver=$1

    # Handle no arg.
    if [[ -z "$ver" ]]; then
        dirs=$(ls -1d $HOME/opt/node-* 2>/dev/null)
        if [[ -z "$dirs" ]]; then
            nvm list
        else
            for d in $dirs; do
                echo $(basename $d | cut -d- -f2)
            done
        fi
        ver=$(node --version 2>/dev/null)
    else
        dir=$HOME/opt/node-$ver/bin
        if [[ ! -d $dir ]]; then
            if which nvm >/dev/null 2>/dev/null; then
                if ! nvm use $ver; then
                    return
                fi
            else
                echo "node-select: error: no '$dir' and no nvm" >&2
                return
            fi
        else
            # Legacy from when I used to build my own Node versions.
            echo "select node $($dir/node --version) at $dir"
            firstpath=$(echo "$PATH" | cut -d: -f1)
            if [[ -n "$(echo "$firstpath" | grep "^$HOME/opt/node-.*/bin" 2>/dev/null)" ]]; then
                export PATH=$(echo "$PATH" | sed -e "s#$firstpath:#$dir:#")
            else
                export PATH=$dir:$PATH
            fi
        fi
    fi
    export NODE_PROFILE=$ver
}

# Select a Python $ver either via pyenv.
# Usage:
#   python-select                  # list avail versions
#   python-select VER [VER2 ...]   # pyenv help global
function python-select {
    local ver dir firstpath
    ver=$1

    if [[ -z "$ver" ]]; then
        pyenv versions
    else
        pyenv global $@
    fi
    ver=$(pyenv version | cut -d' ' -f1)
    export PYTHON_PROFILE=$ver
}

function mkcd() {
    mkdir -p "$1" && cd "$1"
}

function staticserve() {
    for ip in `ifconfig -a | grep "inet " | awk '{print $2}'`; do
        echo "# http://${ip}:8000"
    done
    python3 -m SimpleHTTPServer
}

# Highlight the given term. Usage: ... | hi foo
function hi() {
    perl -pe "s/$1/\e[1;31;43m$&\e[0m/g"
}

# Highlight chars beyond 80 columns.
function col80() {
    perl -pe 's/^(.{80})(.*?)$/$1\e[1;31;43m$2\e[0m/';
}

function fn() { find . -iname "*$@*"; }

alias date-for-date='echo "# Run the following on target machine to set to same date as here." && echo "date $(date -u "+%m%d%H%M%Y.%S")"'
alias date-from-timestamp='node -p -e "(new Date(Number(process.argv[1]))).toISOString()"'

alias docker-ip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
alias docker-name="docker inspect --format '{{ .Name }}'"
function docker-port {
    # The first host:port in NetworkSettings.Ports
    # Q: Does this correspond to the first '-p N:M' in 'docker run' args?
    docker inspect $1 | json -a -e '
        ports=this.NetworkSettings.Ports;
        first=ports[Object.keys(ports)[0]][0];
        this._ = first.HostIp + ":" + first.HostPort' _
}

if [[ $UNAME == "Darwin" ]]; then
    alias ldd='otool -L'

    function uuid() {
        uuidgen | tr A-Z a-z  # mac has `uuidgen`
    }
fi


function node6() {
    local latestVer
    latestVer=$(nvm ls --no-colors v6 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node86() {
    local latestVer
    latestVer=$(nvm ls --no-colors v8.6 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node8() {
    local latestVer
    latestVer=$(nvm ls --no-colors v8 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node10() {
    local latestVer
    latestVer=$(nvm ls --no-colors v10 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node12() {
    local latestVer
    latestVer=$(nvm ls --no-colors v12 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node14() {
    local latestVer
    latestVer=$(nvm ls --no-colors v14 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node16() {
    local latestVer
    latestVer=$(nvm ls --no-colors v16 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node18() {
    local latestVer
    latestVer=$(nvm ls --no-colors v18 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node20() {
    local latestVer
    latestVer=$(nvm ls --no-colors v20 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}
function node21() {
    local latestVer
    latestVer=$(nvm ls --no-colors v21 | tail -1 | cut -c 3- | awk '{print $1}')
    $NVM_DIR/versions/node/${latestVer}/bin/node "$@"
}

# Run something with a matching version of node.
# This intentionally avoids calling 'nvm' because it partially borks in npm workspaces.
#
# Usage: n <version-prefix> <args...>
# E.g.:  n 20 --version; n 18.18 --version
function n() {
    local v
    local ver
    v=$1
    shift
    # This selects *a* version, depending on 'echo' glob ordering.
    ver=$(echo $NVM_DIR/versions/node/v${v}* | xargs basename | tail -1)
    echo "$NVM_DIR/versions/node/${ver}/bin/node $@" >&2
    $NVM_DIR/versions/node/${ver}/bin/node "$@"
}

alias tav='./node_modules/.bin/tav'
alias kc=kubectl

