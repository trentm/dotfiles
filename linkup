#!/usr/bin/env python

r"""linkup $HOME with dotfiles"""

__version_info__ = (1, 0, 0)
__version__ = '.'.join(map(str, __version_info__))

import os
from os.path import join, dirname, isdir, basename, isfile, isabs, \
                    expanduser, exists, islink, normpath, normcase, \
                    abspath, lexists
import sys
import logging
import optparse
import shutil
try:
    from hashlib import md5
except ImportError:
    from md5 import md5



#---- exceptions and globals

class Error(Exception):
    pass

log = logging.getLogger("linkup")
log.setLevel(logging.INFO)

SRC_DIR = join(dirname(abspath(__file__)), "home")
DST_DIR = normpath(os.environ["HOME"])
#DST_DIR = join(normpath(os.environ["HOME"]), "tmp", "home")
BAK_DIR = expanduser("~/tmp/dotfiles.home.old")



#---- main routines

def linkup(src_dir=SRC_DIR, dst_dir=DST_DIR, bak_dir=BAK_DIR, dry_run=False):
    if sys.platform == "win32":
        raise Error("require symlinks, no workie on Windows for now")

    norm_src_dir = normpath(expanduser(src_dir))
    norm_dst_dir = normpath(expanduser(dst_dir))
    if not exists(norm_src_dir):
        raise Error("'%s' does not exist" % norm_src_dir)
    norm_home_dir = expanduser("~")
    if not exists(norm_home_dir):
        raise Error("'%s' does not exist" % norm_home_dir)
    log.debug("linkup '%s' -> '%s'", dst_dir, src_dir)

    # fresh backup dir
    if bak_dir:
        log.info("backup old dotfiles to '%s'", bak_dir)
        if exists(bak_dir):
            shutil.rmtree(bak_dir)

    dir_skips = [".svn", ".hg", ".git"]
    for f in os.listdir(src_dir):
        from_path = join(dst_dir, f)
        to_path = join(src_dir, f)
        if not dry_run:
            _symlink(from_path, to_path, bak_dir)
        else:
            log.info("symlink '%s' -> '%s' (dry-run)", from_path, to_path)


#---- internal support stuff

def _symlink(from_path, to_path, bak_dir):
    """'to_path' is the one that should exist already."""
    # Backup, if necessary.
    if lexists(from_path):
        if not exists(bak_dir):
            os.makedirs(bak_dir)
        bak_path = join(bak_dir, basename(from_path))
        log.debug("backing up '%s' to '%s'", from_path, bak_path)
        os.rename(from_path, bak_path)
    log.info("symlink '%s' -> '%s'", from_path, to_path)
    os.symlink(to_path, from_path)

# Recipe: pretty_logging (0.1) in C:\trentm\tm\recipes\cookbook
class _PerLevelFormatter(logging.Formatter):
    """Allow multiple format string -- depending on the log level.
    
    A "fmtFromLevel" optional arg is added to the constructor. It can be
    a dictionary mapping a log record level to a format string. The
    usual "fmt" argument acts as the default.
    """
    def __init__(self, fmt=None, datefmt=None, fmtFromLevel=None):
        logging.Formatter.__init__(self, fmt, datefmt)
        if fmtFromLevel is None:
            self.fmtFromLevel = {}
        else:
            self.fmtFromLevel = fmtFromLevel
    def format(self, record):
        record.levelname = record.levelname.lower()
        if record.levelno in self.fmtFromLevel:
            #XXX This is a non-threadsafe HACK. Really the base Formatter
            #    class should provide a hook accessor for the _fmt
            #    attribute. *Could* add a lock guard here (overkill?).
            _saved_fmt = self._fmt
            self._fmt = self.fmtFromLevel[record.levelno]
            try:
                return logging.Formatter.format(self, record)
            finally:
                self._fmt = _saved_fmt
        else:
            return logging.Formatter.format(self, record)

def _setup_logging():
    hdlr = logging.StreamHandler()
    defaultFmt = "%(name)s: %(levelname)s: %(message)s"
    infoFmt = "%(name)s: %(message)s"
    fmtr = _PerLevelFormatter(fmt=defaultFmt,
                              fmtFromLevel={logging.INFO: infoFmt})
    hdlr.setFormatter(fmtr)
    logging.root.addHandler(hdlr)

class _NoReflowFormatter(optparse.IndentedHelpFormatter):
    """An optparse formatter that does NOT reflow the description."""
    def format_description(self, description):
        return description or ""



#---- mainline

def main(argv=sys.argv):
    # Parse options.
    parser = optparse.OptionParser(prog="linkup", usage='',
        version="%prog " + __version__, description=__doc__,
        formatter=_NoReflowFormatter())
    parser.add_option("-v", "--verbose", dest="log_level",
        action="store_const", const=logging.DEBUG,
        help="more verbose output")
    parser.add_option("-q", "--quiet", dest="log_level",
        action="store_const", const=logging.WARNING,
        help="quieter output (just warnings and errors)")
    parser.set_default("log_level", logging.INFO)
    parser.add_option("-n", "--dry-run", action="store_true",
        help="dry-run")
    opts, args = parser.parse_args()
    log.setLevel(opts.log_level)

    #SRC_DIR = join(dirname(abspath(__file__)), "home")
    #DST_DIR = normpath(os.environ["HOME"])
    linkup(dry_run=opts.dry_run)

    vscode_settings_dir = normpath(join(os.environ["HOME"],
        "Library", "Application Support", "Code", "User"))
    if sys.platform == "darwin" and isdir(vscode_settings_dir):
        src_dir = join(dirname(abspath(__file__)), "vscode")
        bak_dir = expanduser("~/tmp/dotfiles.vscode.old")
        linkup(src_dir=src_dir, dst_dir=vscode_settings_dir,
            bak_dir=bak_dir, dry_run=opts.dry_run)

    return 0

if __name__ == "__main__":
    if sys.version_info[:2] <= (2,2): __file__ = sys.argv[0]
    _setup_logging() # defined in recipe:pretty_logging
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        sys.exit(1)
    except:
        exc_info = sys.exc_info()
        if hasattr(exc_info[0], "__name__"):
            log.error("%s: %s", exc_info[0].__name__, exc_info[1])
        else:  # string exception
            log.error(exc_info[0])
        if log.isEnabledFor(logging.DEBUG):
            import traceback
            print
            traceback.print_exception(*exc_info)
        sys.exit(1)
    else:
        sys.exit(retval)


